// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package req

import (
	"bytes"
	"fmt"
	"thrift/proto/base"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__

// 加好友请求参数
//
// Attributes:
//  - Header
//  - RequesterId: 申请者用户ID
//  - ApproverId: 被申请者用户ID
//  - Comments: 加好友备注信息
type AddFriendReq struct {
	Header      *base.ReqHeader `thrift:"header,1" db:"header" json:"header"`
	RequesterId int64           `thrift:"requesterId,2" db:"requesterId" json:"requesterId"`
	ApproverId  int64           `thrift:"approverId,3" db:"approverId" json:"approverId"`
	Comments    string          `thrift:"comments,4" db:"comments" json:"comments"`
}

func NewAddFriendReq() *AddFriendReq {
	return &AddFriendReq{}
}

var AddFriendReq_Header_DEFAULT *base.ReqHeader

func (p *AddFriendReq) GetHeader() *base.ReqHeader {
	if !p.IsSetHeader() {
		return AddFriendReq_Header_DEFAULT
	}
	return p.Header
}

func (p *AddFriendReq) GetRequesterId() int64 {
	return p.RequesterId
}

func (p *AddFriendReq) GetApproverId() int64 {
	return p.ApproverId
}

func (p *AddFriendReq) GetComments() string {
	return p.Comments
}
func (p *AddFriendReq) IsSetHeader() bool {
	return p.Header != nil
}

func (p *AddFriendReq) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddFriendReq) ReadField1(iprot thrift.TProtocol) error {
	p.Header = &base.ReqHeader{}
	if err := p.Header.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
	}
	return nil
}

func (p *AddFriendReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RequesterId = v
	}
	return nil
}

func (p *AddFriendReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ApproverId = v
	}
	return nil
}

func (p *AddFriendReq) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Comments = v
	}
	return nil
}

func (p *AddFriendReq) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddFriendReq"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddFriendReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err)
	}
	if err := p.Header.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err)
	}
	return err
}

func (p *AddFriendReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requesterId", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:requesterId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.RequesterId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.requesterId (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:requesterId: ", p), err)
	}
	return err
}

func (p *AddFriendReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("approverId", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:approverId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ApproverId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.approverId (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:approverId: ", p), err)
	}
	return err
}

func (p *AddFriendReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("comments", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:comments: ", p), err)
	}
	if err := oprot.WriteString(string(p.Comments)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.comments (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:comments: ", p), err)
	}
	return err
}

func (p *AddFriendReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddFriendReq(%+v)", *p)
}
